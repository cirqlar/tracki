/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as indexIndexImport } from './routes/(index)/_index'
import { Route as AppAboutImport } from './routes/app/about'
import { Route as indexIndexIndexImport } from './routes/(index)/_index.index'
import { Route as indexIndexAppBeginImport } from './routes/(index)/_index.app.begin'

// Create Virtual Routes

const indexImport = createFileRoute('/(index)')()

// Create/Update Routes

const indexRoute = indexImport.update({
  id: '/(index)',
  getParentRoute: () => rootRoute,
} as any)

const indexIndexRoute = indexIndexImport.update({
  id: '/_index',
  getParentRoute: () => indexRoute,
} as any)

const AppAboutRoute = AppAboutImport.update({
  id: '/app/about',
  path: '/app/about',
  getParentRoute: () => rootRoute,
} as any)

const indexIndexIndexRoute = indexIndexIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => indexIndexRoute,
} as any)

const indexIndexAppBeginRoute = indexIndexAppBeginImport.update({
  id: '/app/begin',
  path: '/app/begin',
  getParentRoute: () => indexIndexRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/(index)': {
      id: '/(index)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof indexImport
      parentRoute: typeof rootRoute
    }
    '/(index)/_index': {
      id: '/(index)/_index'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof indexIndexImport
      parentRoute: typeof indexRoute
    }
    '/app/about': {
      id: '/app/about'
      path: '/app/about'
      fullPath: '/app/about'
      preLoaderRoute: typeof AppAboutImport
      parentRoute: typeof rootRoute
    }
    '/(index)/_index/': {
      id: '/(index)/_index/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof indexIndexIndexImport
      parentRoute: typeof indexIndexImport
    }
    '/(index)/_index/app/begin': {
      id: '/(index)/_index/app/begin'
      path: '/app/begin'
      fullPath: '/app/begin'
      preLoaderRoute: typeof indexIndexAppBeginImport
      parentRoute: typeof indexIndexImport
    }
  }
}

// Create and export the route tree

interface indexIndexRouteChildren {
  indexIndexIndexRoute: typeof indexIndexIndexRoute
  indexIndexAppBeginRoute: typeof indexIndexAppBeginRoute
}

const indexIndexRouteChildren: indexIndexRouteChildren = {
  indexIndexIndexRoute: indexIndexIndexRoute,
  indexIndexAppBeginRoute: indexIndexAppBeginRoute,
}

const indexIndexRouteWithChildren = indexIndexRoute._addFileChildren(
  indexIndexRouteChildren,
)

interface indexRouteChildren {
  indexIndexRoute: typeof indexIndexRouteWithChildren
}

const indexRouteChildren: indexRouteChildren = {
  indexIndexRoute: indexIndexRouteWithChildren,
}

const indexRouteWithChildren = indexRoute._addFileChildren(indexRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof indexIndexIndexRoute
  '/app/about': typeof AppAboutRoute
  '/app/begin': typeof indexIndexAppBeginRoute
}

export interface FileRoutesByTo {
  '/app/about': typeof AppAboutRoute
  '/': typeof indexIndexIndexRoute
  '/app/begin': typeof indexIndexAppBeginRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/(index)': typeof indexRouteWithChildren
  '/(index)/_index': typeof indexIndexRouteWithChildren
  '/app/about': typeof AppAboutRoute
  '/(index)/_index/': typeof indexIndexIndexRoute
  '/(index)/_index/app/begin': typeof indexIndexAppBeginRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/app/about' | '/app/begin'
  fileRoutesByTo: FileRoutesByTo
  to: '/app/about' | '/' | '/app/begin'
  id:
    | '__root__'
    | '/(index)'
    | '/(index)/_index'
    | '/app/about'
    | '/(index)/_index/'
    | '/(index)/_index/app/begin'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  indexRoute: typeof indexRouteWithChildren
  AppAboutRoute: typeof AppAboutRoute
}

const rootRouteChildren: RootRouteChildren = {
  indexRoute: indexRouteWithChildren,
  AppAboutRoute: AppAboutRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/(index)",
        "/app/about"
      ]
    },
    "/(index)": {
      "filePath": "(index)",
      "children": [
        "/(index)/_index"
      ]
    },
    "/(index)/_index": {
      "filePath": "(index)/_index.tsx",
      "parent": "/(index)",
      "children": [
        "/(index)/_index/",
        "/(index)/_index/app/begin"
      ]
    },
    "/app/about": {
      "filePath": "app/about.tsx"
    },
    "/(index)/_index/": {
      "filePath": "(index)/_index.index.tsx",
      "parent": "/(index)/_index"
    },
    "/(index)/_index/app/begin": {
      "filePath": "(index)/_index.app.begin.tsx",
      "parent": "/(index)/_index"
    }
  }
}
ROUTE_MANIFEST_END */
