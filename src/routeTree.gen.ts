/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as AboutImport } from './routes/about'
import { Route as indexIndexImport } from './routes/(index)/_index'
import { Route as indexIndexIndexImport } from './routes/(index)/_index.index'
import { Route as indexIndexBeginImport } from './routes/(index)/_index.begin'

// Create Virtual Routes

const indexImport = createFileRoute('/(index)')()

// Create/Update Routes

const indexRoute = indexImport.update({
  id: '/(index)',
  getParentRoute: () => rootRoute,
} as any)

const AboutRoute = AboutImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRoute,
} as any)

const indexIndexRoute = indexIndexImport.update({
  id: '/_index',
  getParentRoute: () => indexRoute,
} as any)

const indexIndexIndexRoute = indexIndexIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => indexIndexRoute,
} as any)

const indexIndexBeginRoute = indexIndexBeginImport.update({
  id: '/begin',
  path: '/begin',
  getParentRoute: () => indexIndexRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutImport
      parentRoute: typeof rootRoute
    }
    '/(index)': {
      id: '/(index)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof indexImport
      parentRoute: typeof rootRoute
    }
    '/(index)/_index': {
      id: '/(index)/_index'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof indexIndexImport
      parentRoute: typeof indexRoute
    }
    '/(index)/_index/begin': {
      id: '/(index)/_index/begin'
      path: '/begin'
      fullPath: '/begin'
      preLoaderRoute: typeof indexIndexBeginImport
      parentRoute: typeof indexIndexImport
    }
    '/(index)/_index/': {
      id: '/(index)/_index/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof indexIndexIndexImport
      parentRoute: typeof indexIndexImport
    }
  }
}

// Create and export the route tree

interface indexIndexRouteChildren {
  indexIndexBeginRoute: typeof indexIndexBeginRoute
  indexIndexIndexRoute: typeof indexIndexIndexRoute
}

const indexIndexRouteChildren: indexIndexRouteChildren = {
  indexIndexBeginRoute: indexIndexBeginRoute,
  indexIndexIndexRoute: indexIndexIndexRoute,
}

const indexIndexRouteWithChildren = indexIndexRoute._addFileChildren(
  indexIndexRouteChildren,
)

interface indexRouteChildren {
  indexIndexRoute: typeof indexIndexRouteWithChildren
}

const indexRouteChildren: indexRouteChildren = {
  indexIndexRoute: indexIndexRouteWithChildren,
}

const indexRouteWithChildren = indexRoute._addFileChildren(indexRouteChildren)

export interface FileRoutesByFullPath {
  '/about': typeof AboutRoute
  '/': typeof indexIndexIndexRoute
  '/begin': typeof indexIndexBeginRoute
}

export interface FileRoutesByTo {
  '/about': typeof AboutRoute
  '/begin': typeof indexIndexBeginRoute
  '/': typeof indexIndexIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/about': typeof AboutRoute
  '/(index)': typeof indexRouteWithChildren
  '/(index)/_index': typeof indexIndexRouteWithChildren
  '/(index)/_index/begin': typeof indexIndexBeginRoute
  '/(index)/_index/': typeof indexIndexIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/about' | '/' | '/begin'
  fileRoutesByTo: FileRoutesByTo
  to: '/about' | '/begin' | '/'
  id:
    | '__root__'
    | '/about'
    | '/(index)'
    | '/(index)/_index'
    | '/(index)/_index/begin'
    | '/(index)/_index/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  AboutRoute: typeof AboutRoute
  indexRoute: typeof indexRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  AboutRoute: AboutRoute,
  indexRoute: indexRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/about",
        "/(index)"
      ]
    },
    "/about": {
      "filePath": "about.tsx"
    },
    "/(index)": {
      "filePath": "(index)",
      "children": [
        "/(index)/_index"
      ]
    },
    "/(index)/_index": {
      "filePath": "(index)/_index.tsx",
      "parent": "/(index)",
      "children": [
        "/(index)/_index/begin",
        "/(index)/_index/"
      ]
    },
    "/(index)/_index/begin": {
      "filePath": "(index)/_index.begin.tsx",
      "parent": "/(index)/_index"
    },
    "/(index)/_index/": {
      "filePath": "(index)/_index.index.tsx",
      "parent": "/(index)/_index"
    }
  }
}
ROUTE_MANIFEST_END */
